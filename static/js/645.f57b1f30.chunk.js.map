{"version":3,"file":"static/js/645.f57b1f30.chunk.js","mappings":"0LACA,MAA2B,8BAA3B,EAAiE,2BAAjE,EAAqG,4BAArG,EAA2I,6BAA3I,EAAkL,6B,oBCAlL,EAAkC,sCAAlC,EAAuF,mC,6BCCjFA,EAAS,GAef,EAbqB,SAACC,EAAMC,IAC1BC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAIJ,OAHIH,EAAKI,SAAWH,IAClBE,EAAaE,GAAAA,CAAkBL,EAAKI,QAASL,IAExC,WACDI,GACFA,EAAWG,aAGd,CAACL,EAAWD,KCdjB,EAAmC,kCAAnC,EAAwF,kCAAxF,EAA4I,iC,6BCoB5I,MAjBA,YAA+B,IAAZO,EAAW,EAAXA,QACTC,EAAOD,EAAPC,GACFC,GAAWC,EAAAA,EAAAA,MACjB,OACE,gBAAIC,UAAWC,EAAf,WACE,cAAGD,UAAWC,EAAd,SAAmCL,EAAQM,QAC3C,cAAGF,UAAWC,EAAd,SAAmCL,EAAQO,UAC3C,mBACEH,UAAWC,EACXG,QAAS,kBAAMN,EAASO,EAAAA,cAAiCR,KAF3D,wB,UCJS,SAASS,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBnB,EAAYiB,EAASG,OAAS,GAC9BC,GAAkBC,EAAAA,EAAAA,QAAO,MAE/B,OADAC,EAAaF,EAAiBrB,IAE5B,gBACEU,UAAWC,EACXa,MAAO,CAAEC,OAAQzB,EAAY,QAAU,QACvC0B,IAAKL,EAHP,UAKE,eAAIX,UAAWC,EAAf,SACGM,EAASU,KAAI,SAAArB,GAAO,OACnB,SAAC,EAAD,CAASA,QAASA,GAAcA,EAAQC,WCnBlD,MAAwB,sBAAxB,EAAsD,sB,oBCKvC,SAASqB,IACtB,IAAMC,GAAeC,EAAAA,EAAAA,MACfC,GAASb,EAAAA,EAAAA,KAAY,SAAAc,GAAK,OAAIA,EAAMD,UACpCvB,GAAWC,EAAAA,EAAAA,MAEjB,OAEE,mBAAOC,UAAWC,EAASsB,QAASJ,EAApC,mCAEE,kBACEtB,GAAIsB,EACJnB,UAAWC,EACXuB,KAAK,OACLC,MAAOJ,EACPK,SAAU,SAAAC,GAAC,OAAI7B,EAAS8B,EAAAA,GAA6BD,EAAEE,OAAOJ,c,sBCTvD,SAASK,IACtB,IAAMhC,GAAWC,EAAAA,EAAAA,OAEjBR,EAAAA,EAAAA,YAAU,WACRO,EAASO,EAAAA,EAAAA,mBACR,CAACP,IAEJ,IAAMS,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,IACvBsB,GAAYvB,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,IACxBuB,GAAUxB,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,IAE5B,OACE,iBAAKT,UAAWC,EAAhB,WACE,4BACE,mBAAQD,UAAWC,EAAnB,UACE,SAAC,KAAD,CAASgC,GAAG,cAAZ,4BAEF,eAAIjC,UAAWC,EAAf,2BACA,iBAAKD,UAAWC,EAAhB,UACuB,IAApBM,EAASG,SAAgB,iDACzBsB,IAAW,uBAAIA,EAAQE,iBAG5B,4BACE,SAAChB,EAAD,KACA,gBAAKlB,UAAWC,EAAhB,SACuB,IAApBM,EAASG,QAAe,SAACJ,EAAD,IAAmB,KAE7CyB,IACC,gBACEjB,MAAO,CACLqB,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAJhB,UAOE,SAAC,KAAD,CACEtB,OAAO,MACPuB,MAAM,MACNC,MAAM,UACNC,UAAU,sB,4IClDXC,EAAiB,SAAAnB,GAAK,OAAIA,EAAMf,SAASmC,OACzCC,EAAkB,SAAArB,GAAK,OAAIA,EAAMf,SAASqC,SAC1CC,EAAgB,SAAAvB,GAAK,OAAIA,EAAMf,SAASuC,OAGxCC,GAAqBC,EAAAA,EAAAA,IAChC,CAACP,EAHsB,SAAAnB,GAAK,OAAIA,EAAMf,SAASc,UAI/C,SAACqB,EAAOrB,GACN,IAAM4B,EAAmB5B,EAAO6B,oBAChC,OAAOR,EAAMrB,QAAO,SAAAzB,GAAO,OACzBA,EAAQM,KAAKgD,oBAAoBC,SAASF,U","sources":["webpack://goit-react-hw-08-phonebook/./src/components/view/ViewContact/ViewContact.module.css?d082","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/hooks/useScrollbar.js","webpack://goit-react-hw-08-phonebook/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","components/ContactsList/ContactsList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","components/view/ViewContact/ViewContact.js","redux/contacts/contacts-selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formPage\":\"ViewContact_formPage__3PJyP\",\"title\":\"ViewContact_title__dnTrt\",\"button\":\"ViewContact_button__MdN+m\",\"massage\":\"ViewContact_massage__mXcuQ\",\"wrapper\":\"ViewContact_wrapper__vWQHt\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactsWrapper\":\"ContactsList_contactsWrapper__WNcVr\",\"contactsList\":\"ContactsList_contactsList__ZQI1L\"};","import { useEffect } from 'react';\nimport OverlayScrollbars from 'overlayscrollbars';\nconst config = {};\n\nconst useScrollbar = (root, hasScroll) => {\n  useEffect(() => {\n    let scrollbars;\n    if (root.current && hasScroll) {\n      scrollbars = OverlayScrollbars(root.current, config);\n    }\n    return () => {\n      if (scrollbars) {\n        scrollbars.destroy();\n      }\n    };\n  }, [hasScroll, root]);\n};\nexport default useScrollbar;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsListItem\":\"Contact_contactsListItem__fd6WW\",\"contactsListName\":\"Contact_contactsListName__qtXbK\",\"contactsListBtn\":\"Contact_contactsListBtn__QuzOb\"};","import s from './Contact.module.css';\nimport { useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../redux/contacts/contacts-operations';\n\nfunction Contact({ contact }) {\n  const { id } = contact;\n  const dispatch = useDispatch();\n  return (\n    <li className={s.contactsListItem}>\n      <p className={s.contactsListName}>{contact.name}</p>\n      <p className={s.contactsListName}>{contact.number}</p>\n      <button\n        className={s.contactsListBtn}\n        onClick={() => dispatch(contactsOperations.deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default Contact;\n","import s from './ContactsList.module.css';\nimport useScrollbar from 'components/hooks/useScrollbar';\nimport Contact from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport * as contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport { useRef } from 'react';\n\nexport default function ContactsList() {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const hasScroll = contacts.length > 10;\n  const contactsWrapper = useRef(null);\n  useScrollbar(contactsWrapper, hasScroll);\n  return (\n    <div\n      className={s.contactsWrapper}\n      style={{ height: hasScroll ? '600px' : 'auto' }}\n      ref={contactsWrapper}\n    >\n      <ul className={s.contactsList}>\n        {contacts.map(contact => (\n          <Contact contact={contact} key={contact.id} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","// import { useState } from 'react';\nimport s from './Filter.module.css';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\n\nexport default function Filter() {\n  const loginInputId = nanoid();\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    // <div className={s.form}>\n    <label className={s.label} htmlFor={loginInputId}>\n      Find contact by name:\n      <input\n        id={loginInputId}\n        className={s.input}\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n      />\n    </label>\n    // </div>\n  );\n}\n","import s from './ViewContact.module.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { ThreeDots } from 'react-loader-spinner';\nimport ContactsList from 'components/ContactsList/ContactsList';\n\nimport Filter from 'components/Filter/Filter';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { NavLink } from 'react-router-dom';\n\nexport default function ViewContact() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(contactsSelectors.getAllContacts);\n  const isLoading = useSelector(contactsSelectors.getStateLoading);\n  const isError = useSelector(contactsSelectors.getStateError);\n\n  return (\n    <div className={s.formPage}>\n      <div>\n        <button className={s.button}>\n          <NavLink to=\"/addcontact\">Add Contact</NavLink>\n        </button>\n        <h1 className={s.title}>View Contact</h1>\n        <div className={s.massage}>\n          {contacts.length === 0 && <p>No contacts saved yet</p>}\n          {isError && <p>{isError.message}</p>}\n        </div>\n      </div>\n      <div>\n        <Filter />\n        <div className={s.wrapper}>\n          {contacts.length !== 0 ? <ContactsList /> : ''}\n        </div>\n        {isLoading && (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <ThreeDots\n              height=\"100\"\n              width=\"100\"\n              color=\"#3c020b\"\n              ariaLabel=\"loading\"\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\nexport const getAllContacts = state => state.contacts.items;\nexport const getStateLoading = state => state.contacts.loading;\nexport const getStateError = state => state.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return items.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n"],"names":["config","root","hasScroll","useEffect","scrollbars","current","OverlayScrollbars","destroy","contact","id","dispatch","useDispatch","className","s","name","number","onClick","contactsOperations","ContactsList","contacts","useSelector","contactsSelectors","length","contactsWrapper","useRef","useScrollbar","style","height","ref","map","Filter","loginInputId","nanoid","filter","state","htmlFor","type","value","onChange","e","contactsActions","target","ViewContact","isLoading","isError","to","message","display","justifyContent","alignItems","width","color","ariaLabel","getAllContacts","items","getStateLoading","loading","getStateError","error","getVisibleContacts","createSelector","normalizedFilter","toLocaleLowerCase","includes"],"sourceRoot":""}